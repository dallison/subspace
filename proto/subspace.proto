// Copyright 2023-2025 David Allison
// All Rights Reserved
// See LICENSE file for licensing information.

syntax = "proto3";

package subspace;

import "google/protobuf/any.proto";
message InitRequest { string client_name = 1; }

// All Request and Response messages are carried over a Unix Domain
// Socket between the client and the server.  They are followed
// by an array of file descriptors (SCM_RIGHTS message) that
// are duped from the server.  These fds are for shared memory
// segments and trigger fds.  The messages contain indices into
// the fd array.
message InitResponse {
  int32 scb_fd_index = 1; // Index into fds of SystemControlBlock fd.
  int64 session_id = 2;
}

message CreatePublisherRequest {
  string channel_name = 1;
  int32 num_slots = 2;
  int32 slot_size = 3;
  bool is_local = 4;
  bool is_reliable = 5;
  bool is_bridge = 6; // This publisher is for the bridge.
  bytes type = 7;     // Type of data carried on channel.
  bool is_fixed_size = 8;
  string mux = 9;
  int32 vchan_id = 10;
  bool notify_retirement = 11;  // Notify publisher of slot retirement.
}

message CreatePublisherResponse {
  string error = 1;
  int32 channel_id = 2;
  int32 publisher_id = 3;
  int32 ccb_fd_index = 4;
  int32 bcb_fd_index = 5;
  int32 pub_poll_fd_index = 6;
  int32 pub_trigger_fd_index = 7;
  repeated int32 sub_trigger_fd_indexes = 8;
  int32 num_sub_updates = 9;
  bytes type = 10;
  int32 vchan_id = 11;
  int32 retirement_fd_index = 14;             // My retirement fd index (read end)
  repeated int32 retirement_fd_indexes = 15;  // Write end of all retirement fds.
}

// This is used both to create a new subscriber and to reload
// an existing one.  If channel_id is not -1, it refers to
// an existing subscriber to the channel.
message CreateSubscriberRequest {
  string channel_name = 1;
  int32 subscriber_id = 2; // -1 if there is no existing subscriber.
  bool is_reliable = 3;
  bool is_bridge = 4;            // This subscriber is for the bridge.
  bytes type = 5;                // Type of data carried on channel.
  int32 max_active_messages = 6; // Max number of active message objects.
  string mux = 7;
  int32 vchan_id = 8;
}

message CreateSubscriberResponse {
  string error = 1;
  int32 channel_id = 2;
  int32 subscriber_id = 3;
  int32 ccb_fd_index = 4;
  int32 bcb_fd_index = 5;
  int32 trigger_fd_index = 6;
  int32 poll_fd_index = 7;
  int32 slot_size = 8; // Might be zero if no publisher.
  int32 num_slots = 9; // Might be zero if no publisher.
  repeated int32 reliable_pub_trigger_fd_indexes = 10;
  int32 num_pub_updates = 11;
  bytes type = 12;
  int32 vchan_id = 13;
  repeated int32 retirement_fd_indexes = 14;
}

message GetTriggersRequest { string channel_name = 1; }

message GetTriggersResponse {
  string error = 1;
  repeated int32 reliable_pub_trigger_fd_indexes = 2;
  repeated int32 sub_trigger_fd_indexes = 3;
  repeated int32 retirement_fd_indexes = 4;
}

message RemovePublisherRequest {
  string channel_name = 1;
  int32 publisher_id = 2;
}

message RemovePublisherResponse { string error = 1; }

message RemoveSubscriberRequest {
  string channel_name = 1;
  int32 subscriber_id = 2;
}

message RemoveSubscriberResponse { string error = 1; }

message Request {
  oneof request {
    InitRequest init = 1;
    CreatePublisherRequest create_publisher = 2;
    CreateSubscriberRequest create_subscriber = 3;
    GetTriggersRequest get_triggers = 4;
    RemovePublisherRequest remove_publisher = 5;
    RemoveSubscriberRequest remove_subscriber = 6;
  }
}

message Response {
  oneof response {
    InitResponse init = 1;
    CreatePublisherResponse create_publisher = 2;
    CreateSubscriberResponse create_subscriber = 3;
    GetTriggersResponse get_triggers = 4;
    RemovePublisherResponse remove_publisher = 5;
    RemoveSubscriberResponse remove_subscriber = 6;
  }
}

// These messages are carried on Subspace channels published by
// the server.
message ChannelInfo {
  string name = 1;
  int32 slot_size = 2;
  int32 num_slots = 3;
  bytes type = 4;
  int32 num_pubs = 5;         // Total number of publishers for this channel.
  int32 num_subs = 6;         // Total number of subscribers for this channel.
  int32 num_bridge_pubs = 7;  // Number of publishers that are bridges.
  int32 num_bridge_subs = 8;  // Number of subscribers that are bridges.
  bool is_reliable = 9;       // True if channel is reliable.
  bool is_virtual = 10;       // True if channel is virtual.

  // Only if is_virtual is true.
  int32 vchan_id = 11;        // Virtual channel ID.
  string mux = 12;
}

// This is published to the /subspace/ChannelDirectory channel.
message ChannelDirectory {
  string server_id = 1;
  repeated ChannelInfo channels = 2;
}

message ChannelStats {
  string channel_name = 1;
  int64 total_bytes = 2;
  int64 total_messages = 3;
  int32 slot_size = 4;
  int32 num_slots = 5;
  int32 num_pubs = 6;
  int32 num_subs = 7;
  uint32 max_message_size = 8;
  uint32 total_drops = 9;
}

// This is published to the /subspace/Statistics channel.
message Statistics {
  string server_id = 1;
  int64 timestamp = 2;
  repeated ChannelStats channels = 3;
}

message ChannelAddress {
  bytes address = 1; // In host byte order.
  int32 port = 2;       // In host byte order.
}

// This is sent over the connected channel TCP bridge when the
// bridged subscription is successful.
message Subscribed {
  string channel_name = 1;
  int32 slot_size = 2;
  int32 num_slots = 3;
  bool reliable = 4;

  // If the publisher wants notified of retirement, we send the
  // address of a TCP socket that is listening for an incoming
  // connection over which the retirement will be sent.
  bool notify_retirement = 5;
  ChannelAddress retirement_socket = 6;
}

// This is sent over a TCP connection from the peer server when the
// given slot retires and the publisher wants notification of it.
message RetirementNotification {
  int32 slot_id = 1;
}

// This message is sent over UDP.
message Discovery {
  // Ask which server is publishing the named channel.
  message Query { string channel_name = 1; }

  // Advertise that the sender is publishing a channel.
  message Advertise {
    string channel_name = 1;
    bool reliable = 2;
    bool notify_retirement = 3; // Notify publisher when slots retire.
  }

  // Subscribe to the given channel.  The sender is listening
  // on the address specified in 'receiver'.
  message Subscribe {
    string channel_name = 1;
    ChannelAddress receiver = 2;
    bool reliable = 3;
  }

  string server_id = 1;
  int32 port = 2; // UDP port I'm listening on.

  oneof data {
    Query query = 3;
    Advertise advertise = 4;
    Subscribe subscribe = 5;
  }
}

//
// Remote procedure call messages.
//

// Ask the server to open connection to a server.  The response will contain the
// session ID for the server and a list of methods that can be called on it.
message RpcOpenRequest {
}

message RpcOpenResponse {
  message RequestChannel {
    string name = 1; // Name of the channel.
    int32 slot_size = 2; // Size of each slot in bytes.
    int32 num_slots = 3; // Number of slots in the channel.
    string type = 4; // Type of data carried on this channel.
  }

  message ResponseChannel {
    string name = 1; // Name of the channel.
    string type = 2; // Type of data carried on this channel.`
  }
  message Method {
    string name = 1;      // Name of the method to call
    RequestChannel request_channel = 2; // Channel to send request on.
    ResponseChannel response_channel = 3; // Channel to receive response on.
  }
  int32 session_id = 1; // Session ID for this server.
  repeated Method methods = 2; // List of methods available on this server.
  uint64 client_id = 3;   // Client that this is destined for.
}

message RpcCloseRequest {
  int32 session_id = 1; // Session ID to close.
}

message RpcCloseResponse {
}

message RpcServerRequest {
  uint64 client_id = 1;
  int32 request_id = 2;
  oneof request {
    RpcOpenRequest open = 3;
    RpcCloseRequest close = 4;
  }
}

message RpcServerResponse {
  uint64 client_id = 1;
  int32 request_id = 2;
    oneof response {
    RpcOpenResponse open = 3;
    RpcCloseResponse close = 4;
  }
  string error = 5;
}

message RpcRequest {
  string method = 1;
  google.protobuf.Any arguments = 2; // Data to send to the server.
  int32 session_id = 3; // Session ID for this request.
  int32 request_id = 4; // Unique ID for this request.
  uint64 client_id = 5; // Client ID making the request.
}

message RpcResponse {
  string error = 1; // Error message if any.
  google.protobuf.Any result = 2; // Data returned by the server.
  int32 session_id = 3; // Session ID for this response.
  int32 request_id = 4; // Unique ID for this response, matches request.
  uint64 client_id = 5; // Client ID making the request.
}

// Carries raw bytes over RPC.
message RawMessage {
  bytes data = 1;
}

// RPC calls with no result return this.
message VoidMessage {
}
